<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>riceset</title><link>https://riceset.com/</link><description>Recent content on riceset</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2023 riceset</copyright><lastBuildDate>Tue, 15 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://riceset.com/index.xml" rel="self" type="application/rss+xml"/><item><title>An approach to solving the dining philosophers problem</title><link>https://riceset.com/articles/philosophers/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>https://riceset.com/articles/philosophers/</guid><description>
&lt;img src="https://riceset.com/images/philosophers.jpg"/>
&lt;h2 id="-overview">👀 Overview&lt;/h2>
&lt;p>The &lt;strong>Dining Philosophers Problem&lt;/strong> is a computer science problem formulated in 1965 by &lt;a href="https://en.wikipedia.org/wiki/Edsger_W._Dijkstra">Edsger Dijkstra&lt;/a>. It involves dealing with concurrent programming, synchronization issues, threads, deadlocks, and race conditions.&lt;/p>
&lt;h4 id="the-problem">The Problem&lt;/h4>
&lt;p>There are one or more philosophers sitting around a table, with a large bowl of spaghetti placed in the middle. In order for a philosopher to eat, they need to use both their left and right forks simultaneously. There are as many forks as there are philosophers. Additionally, the philosophers cannot communicate with each other.&lt;/p>
&lt;h4 id="the-routine">The routine&lt;/h4>
&lt;p>Each philosopher successively eats, sleeps and thinks.&lt;/p>
&lt;p>&lt;em>“When a philosopher has finished eating, they start sleeping. Once awake they think again.”&lt;/em>&lt;/p>
&lt;h4 id="arguments-to-the-program-argv">Arguments to the program (argv)&lt;/h4>
&lt;ul>
&lt;li>&lt;code>number_of_philosophers&lt;/code>&lt;/li>
&lt;li>&lt;code>time_to_die&lt;/code>&lt;/li>
&lt;li>&lt;code>time_to_eat&lt;/code>&lt;/li>
&lt;li>&lt;code>time_to_sleep&lt;/code>&lt;/li>
&lt;li>&lt;code>number_of_times_each_philo_must_eat&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="expected-output">Expected output&lt;/h4>
&lt;pre tabindex="0">&lt;code class="language-other" data-lang="other">timestamp_in_ms X has taken a fork
timestamp_in_ms X is eating
timestamp_in_ms X is sleeping
timestamp_in_ms X is thinking
timestamp_in_ms X died
&lt;/code>&lt;/pre>&lt;p>in which &lt;code>X&lt;/code> is the philosopher ID.&lt;/p>
&lt;p>&lt;em>&lt;strong>Note&lt;/strong>&lt;/em>: The message announcing the death of a philosopher should be displayed in no more than &lt;em>&lt;strong>10 ms&lt;/strong>&lt;/em> after the actual death.&lt;/p>
&lt;h2 id="-table">🎲 Table&lt;/h2>
&lt;p>In this project, we will be working with a main data structure in which will contain all the other ones, in the case of the philosophers project, as we will be dealing with threads, more specifically, one thread for each philosopher, we will have to find out how to put this table data structure inside each philosopher for accessing data from each thread.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> s_table
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">time_t&lt;/span> start_time;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t_args args;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t_philo &lt;span style="color:#f92672">**&lt;/span>philos;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pthread_mutex_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>forks;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In which, the &lt;code>start_time&lt;/code> is initialized with the actual start time from the program (in miliseconds), &lt;code>args&lt;/code> are the command line arguments (a.k.a argv, argument vector), &lt;code>philos&lt;/code> is a double pointer but it might be easier to think about it as a pointer to an array of philosophers, and the &lt;code>forks&lt;/code> &amp;ldquo;array&amp;rdquo;.&lt;/p>
&lt;p>By the way, I decided creating a new data structure just to store the command line arguments in which I called &lt;code>t_args&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> s_args
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> nb_philos;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">time_t&lt;/span> time_to_die;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">time_t&lt;/span> time_to_eat;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">time_t&lt;/span> time_to_sleep;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> must_eat;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And that&amp;rsquo;s how I initialized the values:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">init_args&lt;/span>(t_args &lt;span style="color:#f92672">*&lt;/span>args, &lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args&lt;span style="color:#f92672">-&amp;gt;&lt;/span>nb_philos &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">philo_atoi&lt;/span>(argv[&lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args&lt;span style="color:#f92672">-&amp;gt;&lt;/span>time_to_die &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">philo_atoi&lt;/span>(argv[&lt;span style="color:#ae81ff">2&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args&lt;span style="color:#f92672">-&amp;gt;&lt;/span>time_to_eat &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">philo_atoi&lt;/span>(argv[&lt;span style="color:#ae81ff">3&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args&lt;span style="color:#f92672">-&amp;gt;&lt;/span>time_to_sleep &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">philo_atoi&lt;/span>(argv[&lt;span style="color:#ae81ff">4&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (argc &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args&lt;span style="color:#f92672">-&amp;gt;&lt;/span>must_eat &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">philo_atoi&lt;/span>(argv[&lt;span style="color:#ae81ff">5&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args&lt;span style="color:#f92672">-&amp;gt;&lt;/span>must_eat &lt;span style="color:#f92672">=&lt;/span> MUST_EAT_NOT_SET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;strong>note&lt;/strong>&lt;/em>: &lt;code>MUST_EAT_NOT_SET&lt;/code> is a macro I defined to -1.&lt;/p>
&lt;p>And if you&amp;rsquo;re asking yourself why I didn&amp;rsquo;t typedef any of these structures, that&amp;rsquo;s because I &amp;ldquo;typedefed&amp;rdquo; all of them above their declaration in the header file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> s_table t_table;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> s_args t_args;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> s_philo t_philo;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> timeval t_timeval;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-forks">🍴 Forks&lt;/h2>
&lt;p>In my table structure I&amp;rsquo;ve got a mutex pointer called forks in which it will point to a block of memory containing all the mutexes used in the program.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pthread_mutex_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>forks;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, on my data structure that represents a philosopher I have an array with 2 values. The index 0 of this array represents the philosopher&amp;rsquo;s left fork and the index 1 represents the right fork respectively.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">unsigned&lt;/span> forks[&lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;strong>note&lt;/strong>&lt;/em>: The keyword &lt;code>unsigned&lt;/code> is an alternative way of writing &lt;code>unsigned int&lt;/code>.&lt;/p>
&lt;p>As I declared my table as a regular variable into &lt;code>main()&lt;/code>, I won&amp;rsquo;t need to allocate memory for it.&lt;/p>
&lt;p>We will just need to allocate memory for the mutexes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">alloc_forks&lt;/span>(t_table &lt;span style="color:#f92672">*&lt;/span>table)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>forks &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">pthread_mutex_t&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>args.nb_philos);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>allocating the desired amount of bytes. (size of a mutex in bytes times the number of philosophers that is the number of forks, in other words, mutexes).&lt;/p>
&lt;h4 id="initializing-the-mutexes">Initializing the mutexes&lt;/h4>
&lt;p>after allocating memory to the created mutexes, we will have to initialize them:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">init_forks&lt;/span>(t_table &lt;span style="color:#f92672">*&lt;/span>table)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">alloc_forks&lt;/span>(table);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (i &lt;span style="color:#f92672">&amp;lt;&lt;/span> table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>args.nb_philos)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pthread_mutex_init&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>forks[i], NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it for allocating and initializing mutexes :)&lt;/p>
&lt;h2 id="-dealing-with-the-philosopher-data-structure">💭 Dealing with the philosopher data structure&lt;/h2>
&lt;p>That&amp;rsquo;s the definition for the philosopher data structure:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> s_philo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pthread_t&lt;/span> &lt;span style="color:#66d9ef">thread&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> id;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> times_ate;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> forks[&lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">time_t&lt;/span> last_meal;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t_table &lt;span style="color:#f92672">*&lt;/span>table;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before doing anything else, we need to of course, allocate memory for the philosophers data structure.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">alloc_philos&lt;/span>(t_table &lt;span style="color:#f92672">*&lt;/span>table)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>philos &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(&lt;span style="color:#66d9ef">sizeof&lt;/span>(t_philo &lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>args.nb_philos);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (i &lt;span style="color:#f92672">&amp;lt;&lt;/span> table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>args.nb_philos)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>philos[i] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(&lt;span style="color:#66d9ef">sizeof&lt;/span>(t_philo));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First, we allocate the pointers that will point to each philosopher, then using these pointers that were allocated, we allocate the actual memory for each philosopher.&lt;/p>
&lt;h4 id="initializing-the-philosophers">Initializing the philosophers&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">init_philos&lt;/span>(t_table &lt;span style="color:#f92672">*&lt;/span>table)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">alloc_philos&lt;/span>(table);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (i &lt;span style="color:#f92672">&amp;lt;&lt;/span> table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>args.nb_philos)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>philos[i]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>id &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>philos[i]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>times_ate &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>philos[i]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>table &lt;span style="color:#f92672">=&lt;/span> table;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>philos[i]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>forks[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>philos[i]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>forks[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> (i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">%&lt;/span> table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>args.nb_philos;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let&amp;rsquo;s break down this function.&lt;/p>
&lt;p>First, we need to assign an ID to each philosopher and it need to begin at 1. As we are indexing using &lt;code>i&lt;/code> that usually gets initialized at 0, we need to add 1 to it to get the actual id.&lt;/p>
&lt;p>So when &lt;code>i&lt;/code> is 0, that means, the first philosopher will have the ID &lt;code>i&lt;/code> + 1 that is 1.&lt;/p>
&lt;p>The &lt;code>times_ate&lt;/code> gets an initial value of 0 and we are assigning a pointer to &lt;code>table&lt;/code> to have a reference inside each thread created later.&lt;/p>
&lt;h4 id="assigning-forks">Assigning forks&lt;/h4>
&lt;p>The current philosopher&amp;rsquo;s left fork will be &lt;code>i&lt;/code>. So for example, when $$i = 0$$ the philosopher&amp;rsquo;s ID will be 1 so their left fork will be 0 and their right fork gotta be 1.&lt;/p>
&lt;p>To get to the value of 1 we need to index it using the following formula:&lt;/p>
&lt;p>$$
(i + 1) \mod n
$$&lt;/p>
&lt;p>So imagine we have 2 philosophers (n = 2), the first philosopher&amp;rsquo;s right fork will represent the following index:&lt;/p>
&lt;p>$$
(0 + 1) \mod 2
$$&lt;/p>
&lt;p>$$
= 1 \mod 2
$$&lt;/p>
&lt;p>$$
= 1
$$&lt;/p>
&lt;p>The second philosopher will have:&lt;/p>
&lt;p>$$
(1 + 1) \mod 2
$$&lt;/p>
&lt;p>$$
= 2 \mod 2
$$&lt;/p>
&lt;p>$$
= 0
$$&lt;/p>
&lt;p>So the first philosopher&amp;rsquo;s left fork will be 0, and the right fork will be 1, while the second philosopher&amp;rsquo;s left fork will be 1 and the right fork will be 0 again. We just succeeded in simulating a round table with forks in between each philosopher.&lt;/p>
&lt;p>&lt;img src="https://res.craft.do/user/preview/a56c5213-5c17-64c0-d902-b9958ea11cb4/doc/9BCB3C86-9D37-4BE9-863E-5303AA81C84B/4DE81475-B9BB-4B1F-AC51-8AFD3C416B8A_1/4aMSLV7rtyUkDXHAUXORo5u5POCWDIyqsbGsLMoZV4kz/Drawing.jpg" alt="Drawing">&lt;/p>
&lt;h2 id="-calculating-the-time-stamps">⏳ Calculating the time stamps&lt;/h2>
&lt;p>As the program wants the output in miliseconds and the function &lt;code>gettimeofday()&lt;/code> gives us values in seconds and microseconds, we have to convert both to miliseconds and sum them up.&lt;/p>
&lt;h4 id="remembering-that">remembering that&lt;/h4>
&lt;p>$$
1s = 1000ms
$$&lt;/p>
&lt;h4 id="and-that">and that&lt;/h4>
&lt;p>$$
1μs = \frac{1}{1000}ms
$$&lt;/p>
&lt;p>$$
\therefore 1μs = 0.001ms
$$&lt;/p>
&lt;p>Now with all the values in miliseconds, we can sum them up to get the current time in miliseconds.&lt;/p>
&lt;h4 id="example">Example:&lt;/h4>
&lt;p>Let’s try converting the following value that is given in seconds to miliseconds.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">time_t&lt;/span> &lt;span style="color:#a6e22e">s_to_ms&lt;/span>(&lt;span style="color:#66d9ef">time_t&lt;/span> s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (s &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>$$
41923s \times 1000 = 41923000ms
$$&lt;/p>
&lt;p>Now, let’s convert the microsecond part to miliseconds (discarding the decimal part).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">time_t&lt;/span> &lt;span style="color:#a6e22e">us_to_ms&lt;/span>(&lt;span style="color:#66d9ef">time_t&lt;/span> us)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (us &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>$$
\frac{126500}{1000}μs = 126ms
$$&lt;/p>
&lt;p>Summing the seconds and microseconds now converted to miliseconds we get:&lt;/p>
&lt;p>$$
41923000ms + 126ms = 41923126ms
$$&lt;/p>
&lt;p>Now, to get the current time you just subtract the &lt;code>gettimeofday()&lt;/code> call from the start time that would be the value you saved when calling it for the first time. That would be the code for the conversion made:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">get_current_time&lt;/span>(&lt;span style="color:#66d9ef">time_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>s, &lt;span style="color:#66d9ef">time_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>us)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t_timeval tv;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">gettimeofday&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>tv, NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>s &lt;span style="color:#f92672">=&lt;/span> tv.tv_sec;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>us &lt;span style="color:#f92672">=&lt;/span> tv.tv_usec;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">time_t&lt;/span> s;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">time_t&lt;/span> us;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">get_current_time&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>s, &lt;span style="color:#f92672">&amp;amp;&lt;/span>us);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;current_time_in_ms:%ld&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">s_to_ms&lt;/span>(s) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">us_to_ms&lt;/span>(us));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-references">🚀 References&lt;/h2>
&lt;h4 id="my-repository">My repository&lt;/h4>
&lt;p>&lt;a href="https://github.com/riceset/philosophers">GitHub - riceset/philosophers&lt;/a>&lt;/p></description></item><item><title>Understanding the stack data structure</title><link>https://riceset.com/articles/understanding-the-stack-data-structure/</link><pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate><guid>https://riceset.com/articles/understanding-the-stack-data-structure/</guid><description>
&lt;p>&lt;strong>Stack&lt;/strong> is an ADT (Abstract Data Structure) which follows the LIFO (Last In First Out) order. It might be easier to understand this concept by imagining an actual stack of books.&lt;/p>
&lt;p>When working with stacks, you can use mainly two operations. &lt;code>push()&lt;/code> to add an element to the top of a stack and &lt;code>pop()&lt;/code> to literally pop out or remove an element of a stack. As it is considered an ADT (Abstract Data Structure) you can implement it in many ways with other basic data structures such as arrays or linked lists. Let’s try implementing it using an array first.&lt;/p>
&lt;h2 id="implementing-push">Implementing push():&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> element)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stack[depth] &lt;span style="color:#f92672">=&lt;/span> element;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> depth&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>in which, &lt;code>element&lt;/code> is the value (an integer in this case) you want to put on the top of the stack and &lt;code>depth&lt;/code> is the size of the stack. I defined the stack and the depth as global variables with the following default values:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define MAX_DEPTH 256
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> stack[MAX_DEPTH];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> depth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also add some error handling such as returning when the stack’s depth has reached the &lt;code>MAX_DEPTH&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> element)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (depth &lt;span style="color:#f92672">==&lt;/span> MAX_DEPTH)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stack[depth] &lt;span style="color:#f92672">=&lt;/span> element;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> depth&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="implementing-pop">Implementing pop():&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">pop&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> depth&lt;span style="color:#f92672">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (stack[depth]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Simple as that.&lt;/p>
&lt;p>Like &lt;code>push()&lt;/code>, you can also add some error handling to this function such as exiting out from the program when the stack is empty (in other words, when the depth is 0).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">pop&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (depth &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exit&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> depth&lt;span style="color:#f92672">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (stack[depth]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="usage">Usage:&lt;/h2>
&lt;p>From the &lt;code>main()&lt;/code> function, let’s try pushing some elements into our stack and then, printing the whole stack out.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>; i&lt;span style="color:#f92672">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%d &amp;#34;&lt;/span>, stack[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;strong>output:&lt;/strong>&lt;/em> 3 2 1&lt;/p>
&lt;p>&lt;em>&lt;strong>note:&lt;/strong>&lt;/em> The output will be printed in reverse order.&lt;/p>
&lt;p>You can also try popping out an element from the stack simply by calling &lt;em>&lt;strong>pop()&lt;/strong>&lt;/em>.&lt;/p></description></item><item><title>Understanding signals in Linux</title><link>https://riceset.com/articles/signals/</link><pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate><guid>https://riceset.com/articles/signals/</guid><description>
&lt;h2 id="what-is-a-process-id">What is a process ID?&lt;/h2>
&lt;p>A process ID a.k.a. &lt;em>&lt;strong>PID&lt;/strong>&lt;/em> is literally what the name says, it is a number to uniquely identify a running process. You can print your program’s &lt;em>&lt;strong>PID&lt;/strong>&lt;/em> in C using the &lt;em>&lt;strong>getpid()&lt;/strong>&lt;/em> function included on the header file &lt;em>&lt;strong>unistd.h&lt;/strong>&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PID: %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">getpid&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sleep&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;strong>output: “&lt;/strong>&lt;/em> PID: 12345 ”&lt;/p>
&lt;p>&lt;em>&lt;strong>note:&lt;/strong>&lt;/em> “12345” is a PID for an arbitrary process.&lt;/p>
&lt;h2 id="what-is-a-signal">What is a signal?&lt;/h2>
&lt;p>A signal is a one-way message to inform that something important happened sent by a process to a process, the kernel to the process, or a process to itself. Some examples of signals are &lt;em>&lt;strong>SIGINT&lt;/strong>&lt;/em> and &lt;em>&lt;strong>SIGSTOP&lt;/strong>&lt;/em> mapped to “ctrl-C” and “ctrl-Z” respectively on &lt;strong>Unix-like Operating Systems.&lt;/strong>&lt;/p>
&lt;h2 id="sending-signals">Sending signals:&lt;/h2>
&lt;p>You can send a signal with the command &lt;em>&lt;strong>kill&lt;/strong>&lt;/em> through the command line specifying as the first parameter the signal you want to send, and as the second parameter the PID of the process you want to send it to.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kill -INT &lt;span style="color:#ae81ff">12345&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or in C (don’t forget to include the header file &lt;em>&lt;strong>signal.h&lt;/strong>&lt;/em>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">kill&lt;/span>(&lt;span style="color:#ae81ff">12345&lt;/span>, SIGINT);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="handling-signals">Handling signals:&lt;/h2>
&lt;p>You can use the &lt;em>&lt;strong>signal()&lt;/strong>&lt;/em> function in C to handle a specific signal defined as the first parameter in the &lt;em>&lt;strong>signal()&lt;/strong>&lt;/em> function call, and pass the address of a function you would like to run when the specified signal is received.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">signal&lt;/span>(SIGINT, &lt;span style="color:#f92672">&amp;amp;&lt;/span>sigint_handler);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, I will define the &lt;em>&lt;strong>sigint_handler()&lt;/strong>&lt;/em> function as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">sigint_handler&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> signal_number)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;sigint&amp;#39;s signal number is %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, signal_number);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The function above will be run when &lt;em>&lt;strong>SIGINT&lt;/strong>&lt;/em> (when the user presses &lt;em>&lt;strong>ctrl-C&lt;/strong>&lt;/em> or uses the kill program/function to send a signal) is sent. It will simply print the signal number for &lt;em>&lt;strong>SIGINT&lt;/strong>&lt;/em> based&lt;/p>
&lt;p>on the table shown on the manual page for &lt;em>&lt;strong>signal&lt;/strong>&lt;/em>. To see it, just run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>man signal
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>By the way, there are some pre-existing functions that you can pass to &lt;em>&lt;strong>signal()&lt;/strong>&lt;/em> such as &lt;em>&lt;strong>SIG_IGN&lt;/strong>&lt;/em> (to ignore a signal) and &lt;em>&lt;strong>SIG_DFL&lt;/strong>&lt;/em> (for default handling of a certain signal).&lt;/p>
&lt;p>Usage:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">signal&lt;/span>(SIGINT, SIG_IGN);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Introduction to Vim</title><link>https://riceset.com/articles/introduction-to-vim/</link><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid>https://riceset.com/articles/introduction-to-vim/</guid><description>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/48802655/152667513-3df23c18-887d-409b-a644-d631ad7c8cd0.jpg" alt="vim">&lt;/p>
&lt;p>Vim is one of the most powerful text editors you can think of. In this article, I will introduce you some basic and useful Vim commands.&lt;/p>
&lt;h2 id="vim-modes">Vim modes&lt;/h2>
&lt;p>There are two main modes in Vim. Normal Mode and Insert Mode.
In Insert Mode you can type on the document as in any other text editor. In Normal Mode you can execute commands to navigate though the file or modify it.&lt;/p>
&lt;h2 id="entering-normal-mode">Entering Normal Mode&lt;/h2>
&lt;p>Press the escape key to enter Normal Mode. (Most Vim users usually remap escape to caps lock. On a Mac you can do it using &lt;a href="https://github.com/pqrs-org/Karabiner-Elements">Karabiner&lt;/a>.)&lt;/p>
&lt;h2 id="entering-insert-mode">Entering Insert Mode&lt;/h2>
&lt;p>To enter insert mode you just have to type &lt;code>i&lt;/code> or &lt;code>a&lt;/code> while on Normal Mode. If you entered Insert Mode with the &lt;code>i&lt;/code> key, you will be able to insert text on the left side of your cursor. In contrast, with &lt;code>a&lt;/code>, you will insert text on the right side of the cursor. &lt;code>C&lt;/code> (Shift-c) deletes all the text from the cursor position to the end of the line and puts you in Insert Mode.&lt;/p>
&lt;p>There is also &lt;code>o&lt;/code> that allows you to insert text on the next line.&lt;/p>
&lt;h3 id="uppercased-versions">Uppercased versions&lt;/h3>
&lt;p>&lt;code>I&lt;/code> (Shift-i) will put you on insert mode on the beginning of the line.
&lt;code>A&lt;/code> (Shift-a) will put you on insert mode on the end of the line. &lt;code>O&lt;/code> (Shift-o) will put on insert mode on the previous line.&lt;/p>
&lt;h2 id="visual-mode">Visual Mode&lt;/h2>
&lt;p>Visual Mode is used for selecting text.&lt;/p>
&lt;ul>
&lt;li>&lt;code>v&lt;/code> Enter visual mode.&lt;/li>
&lt;li>&lt;code>V&lt;/code> Enter visual line mode.&lt;/li>
&lt;li>&lt;code>ctrl-v&lt;/code> Enter visual block mode.&lt;/li>
&lt;/ul>
&lt;h2 id="exiting-vim">Exiting Vim&lt;/h2>
&lt;p>The most known way of exiting Vim is using &lt;code>:wq&lt;/code> (write and quit) or &lt;code>:q!&lt;/code> (quit without saving).&lt;/p>
&lt;p>But, there is a more efficient ways of exiting Vim. You type &lt;code>ZZ&lt;/code> (shift-zz) to exit Vim saving or &lt;code>ZQ&lt;/code> (shift-zq) to exit it without saving.&lt;/p>
&lt;hr>
&lt;h2 id="cursor-movement">Cursor Movement&lt;/h2>
&lt;h3 id="basic-movement-hjkl">Basic Movement (HJKL)&lt;/h3>
&lt;ul>
&lt;li>&lt;code>H&lt;/code> Move to the left.&lt;/li>
&lt;li>&lt;code>J&lt;/code> Move down.&lt;/li>
&lt;li>&lt;code>K&lt;/code> Move up.&lt;/li>
&lt;li>&lt;code>L&lt;/code> Move to the right.&lt;/li>
&lt;/ul>
&lt;h3 id="movement-word-per-word">Movement word per word&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>w&lt;/code> Move to the next word.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>W&lt;/code> Move to the next word (separated by whitespace).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>b&lt;/code> Move a word backwards.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>B&lt;/code> Move a word backwards (separated by whitespace).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>e&lt;/code> Move to the end of the next word.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>E&lt;/code> Move to the end of the next word (separated by whitespace).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>You can use all of these commands with a count. e.g. &lt;code>5w&lt;/code> to move the cursor 5 words forward.&lt;/p>
&lt;h3 id="moving-the-cursor">Moving the cursor&lt;/h3>
&lt;ul>
&lt;li>&lt;code>H&lt;/code> Put the cursor on the top.&lt;/li>
&lt;li>&lt;code>M&lt;/code> Put the cursor on the middle.&lt;/li>
&lt;li>&lt;code>L&lt;/code> Put the cursor on the bottom.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Mnemonic: High, Middle, Low.&lt;/p>
&lt;/blockquote>
&lt;h3 id="movement-by-paragraph">Movement by paragraph&lt;/h3>
&lt;ul>
&lt;li>&lt;code>{&lt;/code> Move the cursor a paragraph up.&lt;/li>
&lt;li>&lt;code>}&lt;/code> Move the cursor a paragraph down.&lt;/li>
&lt;/ul>
&lt;h2 id="movement-through-the-line">Movement through the line&lt;/h2>
&lt;h3 id="including-whitespace">Including whitespace&lt;/h3>
&lt;p>&lt;code>0&lt;/code> Go to the beginning of the line.
&lt;code>$&lt;/code> Go to the end of the line.&lt;/p>
&lt;h3 id="not-including-whitespace">Not including whitespace&lt;/h3>
&lt;p>&lt;code>^&lt;/code> Go to the beginning of the line.
&lt;code>g_&lt;/code> Go to the end of the line.&lt;/p>
&lt;h2 id="g-and-gg">G and gg&lt;/h2>
&lt;p>Use &lt;code>G&lt;/code> Go to the bottom of the file.
Use&lt;code>gg&lt;/code> Go to the top of the file.&lt;/p>
&lt;h2 id="f-and-t">f and t&lt;/h2>
&lt;ul>
&lt;li>&lt;code>f&lt;/code> followed by a word &lt;code>a&lt;/code> moves the cursor the the next occurrence of the word &lt;code>a&lt;/code> on a line.&lt;/li>
&lt;li>&lt;code>t&lt;/code> followed by a word &lt;code>a&lt;/code> moves your cursor a word before the the next occurrence of the word &lt;code>a&lt;/code> word on a line.&lt;/li>
&lt;/ul>
&lt;h3 id="example">Example&lt;/h3>
&lt;pre tabindex="0">&lt;code>The quick brown fox jumps over the lazy dog.
^
&lt;/code>&lt;/pre>&lt;p>Using &lt;code>fb&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>The quick brown fox jumps over the lazy dog.
^
&lt;/code>&lt;/pre>&lt;p>Using &lt;code>tb&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>The quick brown fox jumps over the lazy dog.
^
&lt;/code>&lt;/pre>&lt;h2 id="moving-the-screen">Moving the screen&lt;/h2>
&lt;ul>
&lt;li>&lt;code>zt&lt;/code> Put the current line on the top of the screen.&lt;/li>
&lt;li>&lt;code>zz&lt;/code> Put the current line on the middle of the screen.&lt;/li>
&lt;li>&lt;code>zb&lt;/code> Put the current line on the bottom of the screen.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="deleting-text">Deleting text&lt;/h2>
&lt;p>To delete text, you can use the &lt;code>d&lt;/code> followed by what you want to delete.
(You can use all of the following commands with &lt;code>c&lt;/code> instead of &lt;code>d&lt;/code> to delete and CHANGE what you just deleted. In other words, it deletes and puts you on Insert Mode.)&lt;/p>
&lt;h3 id="counts">Counts&lt;/h3>
&lt;p>In Vim you can specify the number of times to execute a command. For example, you can delete a line with &lt;code>dd&lt;/code> and &lt;code>5dd&lt;/code> for deleting 5 lines at once. It also works for other commands like &lt;code>5dap&lt;/code>, &lt;code>5daw&lt;/code>, etc.&lt;/p>
&lt;h3 id="some-delete-commands">Some delete commands&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>diw&lt;/code> Delete a word.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>daw&lt;/code> Delete a word w/ surrounding whitespace.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>di(&lt;/code> Delete inside a ().&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>da(&lt;/code> Delete a () w/ surrounding whitespace.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>di[&lt;/code> Delete inside a [].&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>da[&lt;/code> Delete a [] w/ surrounding whitespace.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>di{&lt;/code> Delete inside a {}.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>da{&lt;/code> Delete a {} w/ surrounding whitespace.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>dip&lt;/code> Delete inside a paragraph.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>dap&lt;/code> Delete a paragraph w/ surrounding whitespace.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>dit&lt;/code> Delete inside an HTML tag.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>dat&lt;/code> Delete an HTML tag w/ surrounding whitespace.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>dw&lt;/code> Delete word, only works if the cursor is positioned on the beginning of the word.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>D&lt;/code> Delete from the cursor to the end of the line.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>dd&lt;/code> Delete the current line.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>5dd&lt;/code> Delete the next 5 lines.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>dG&lt;/code> Delete from the current line until the end of the document.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>dgg&lt;/code> Delete form the current line until the beginning of the document.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="copying-and-pasting">Copying and Pasting&lt;/h2>
&lt;ul>
&lt;li>&lt;code>y&lt;/code> (for YANK) copy. (e.g. to copy a word type &lt;code>yw&lt;/code>)&lt;/li>
&lt;li>&lt;code>yy&lt;/code> Copy a whole line.&lt;/li>
&lt;li>&lt;code>p&lt;/code> Paste.&lt;/li>
&lt;/ul>
&lt;h2 id="searching">Searching&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>/&lt;/code> Search. (Navigate with ‘n/N’)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>?&lt;/code> Search backwards. (Navigate with ‘n/N’)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//&lt;/code> Search for the last pattern searched.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>??&lt;/code> Search for the last pattern searched backwards.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>*&lt;/code> Search the current word.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>#&lt;/code> Search the current word backwards.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>:set ic&lt;/code> Search case insensitively.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="replacing-text">Replacing Text&lt;/h2>
&lt;pre tabindex="0">&lt;code>:%s/old/new/g
:%s/old/new/gi (case insensitive)
:%s/old/new/gc (prompts before each replacement)
&lt;/code>&lt;/pre>&lt;h2 id="undo-and-redo">Undo and Redo&lt;/h2>
&lt;ul>
&lt;li>&lt;code>u&lt;/code> Undo the last change.&lt;/li>
&lt;li>&lt;code>U&lt;/code> Undo the last changes on the current line.&lt;/li>
&lt;li>&lt;code>ctrl-r&lt;/code> Redo the last change.&lt;/li>
&lt;/ul>
&lt;h2 id="tabs">Tabs&lt;/h2>
&lt;ul>
&lt;li>&lt;code>:tabnew&lt;/code> Open a new tab.&lt;/li>
&lt;li>&lt;code>:tabnext&lt;/code> Go to the next tab. (Also &lt;code>:tabn&lt;/code>)&lt;/li>
&lt;li>&lt;code>:tabprevious&lt;/code> Go to the previous tab. (Also &lt;code>:tabp&lt;/code>)&lt;/li>
&lt;li>&lt;code>:tabfirst&lt;/code> Go to the first tab.&lt;/li>
&lt;li>&lt;code>:tablast&lt;/code> Go to the last tab.&lt;/li>
&lt;li>&lt;code>:tabmove (num)&lt;/code> Move the current tab to the specified &lt;code>num&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h2 id="editing">Editing&lt;/h2>
&lt;p>&lt;code>edit&lt;/code> or &lt;code>e&lt;/code> open a file in Vim. (On a new tab for example.)&lt;/p>
&lt;h2 id="macros">Macros&lt;/h2>
&lt;p>Start / Stop recording a macro with &lt;code>q&lt;/code> on one of Vim’s 26 registers (a-z).
Use &lt;code>@&lt;/code> with the register key to play the recorded macro.
You can play it &lt;code>n&lt;/code> times with &lt;code>n@q&lt;/code> with &lt;code>q&lt;/code> being the register.&lt;/p>
&lt;h2 id="marks">Marks&lt;/h2>
&lt;p>Record your current position in a register.&lt;/p>
&lt;ul>
&lt;li>&lt;code>mb&lt;/code> Set a mark on register &lt;code>b&lt;/code>. (Using an uppercased mark like &lt;code>mB&lt;/code> makes it accessible on all the files being edited.)&lt;/li>
&lt;li>&lt;code>’b&lt;/code> Go the the mark set on &lt;code>b&lt;/code>.&lt;/li>
&lt;li>&lt;code>:marks&lt;/code> List all the current marks.&lt;/li>
&lt;li>&lt;code>:delmarks b&lt;/code> Delete a mark.&lt;/li>
&lt;li>&lt;code>:delmarks a-c&lt;/code> Delete a range of marks.&lt;/li>
&lt;li>&lt;code>:demarks!&lt;/code> Delete all the marks.&lt;/li>
&lt;/ul>
&lt;h2 id="-command">. command&lt;/h2>
&lt;p>Rerun the last executed command on Normal Mode.&lt;/p>
&lt;h2 id="g">g&lt;/h2>
&lt;ul>
&lt;li>&lt;code>g&lt;/code> + hjkl, 0, $, etc navigates an one line paragraph.&lt;/li>
&lt;li>&lt;code>gq&lt;/code> Reformat an one line paragraph.&lt;/li>
&lt;li>&lt;code>ga&lt;/code> Give you the ASCII value of the current character.&lt;/li>
&lt;li>&lt;code>gf&lt;/code> Open the file under the cursor.&lt;/li>
&lt;li>&lt;code>gi&lt;/code> Continue inserting text to where you were before.&lt;/li>
&lt;/ul>
&lt;h2 id="indentation">Indentation&lt;/h2>
&lt;p>Indent the current line using &lt;code>&amp;lt;&lt;/code> and &lt;code>&amp;gt;&lt;/code>.&lt;/p>
&lt;h2 id="running-a-shell-command">Running a Shell command&lt;/h2>
&lt;p>Use &lt;code>:!&lt;/code> to run a Shell command.
e.g. &lt;code>:! ls&lt;/code> to run &lt;code>ls&lt;/code>.&lt;/p>
&lt;h2 id="heading">%&lt;/h2>
&lt;p>&lt;code>%&lt;/code> Jump to the matching parenthesis, brackets, etc.&lt;/p></description></item><item><title>How to enable image preview on Ranger using Kitty</title><link>https://riceset.com/articles/how-to-enable-image-preview-on-ranger-using-kitty/</link><pubDate>Mon, 09 Aug 2021 00:00:00 +0000</pubDate><guid>https://riceset.com/articles/how-to-enable-image-preview-on-ranger-using-kitty/</guid><description>
&lt;p>&lt;img src="https://riceset.com/ranger_img_demo.png" alt="demo">&lt;/p>
&lt;h2 id="getting-started">Getting Started&lt;/h2>
&lt;p>First, create a config file for Ranger in &lt;code>~/.config/ranger&lt;/code> called &lt;code>rc.conf&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>cd ~/.config/ranger &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> touch rc.config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Open the config file and add the following lines to it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>set preview_images true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set preview_images_method kitty
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install the &lt;a href="https://pillow.readthedocs.io/en/stable/#">Pillow&lt;/a> library using &lt;code>pip&lt;/code> (Python’s package installer)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>pip install Pillow
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The image preview feature should be working now. If you’re getting an error, try following the steps below.&lt;/p>
&lt;h2 id="error-image-previews-in-kitty-require-pil-pillow">ERROR: Image previews in kitty require PIL (pillow)&lt;/h2>
&lt;p>First, check where Python is located on your computer using the &lt;code>which&lt;/code> command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>which python
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should see something other than &lt;code>/usr/bin/python&lt;/code> and that’s probably the reason why you are getting this error.&lt;/p>
&lt;p>In my case, I installed Python through &lt;a href="https://asdf-vm.com/">ASDF&lt;/a>. So I get the following output when I run &lt;code>which python&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>/Users/riceset/.asdf/shims/python
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should copy this path.&lt;/p>
&lt;hr>
&lt;p>Now go to where Ranger is installed. If you installed it via &lt;a href="https://brew.sh">Homebrew&lt;/a>, you should go to &lt;code>/usr/local/Cellar/ranger/1.9.3/libexec&lt;/code> where 1.9.3 is the version of Ranger that you have installed.&lt;/p>
&lt;p>Open &lt;code>ranger.py&lt;/code> with Vim or any other text editor and replace this line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/python -O
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>with the path to where Python is located. In my case it was:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/Users/riceset/.asdf/shims/python
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, save the file and everything should be working.&lt;/p></description></item><item><title>Introduction to pointers in C</title><link>https://riceset.com/articles/introduction-to-pointers-in-c/</link><pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate><guid>https://riceset.com/articles/introduction-to-pointers-in-c/</guid><description>
&lt;p>When we declare a variable in C, we generally do something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> num &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you might know, variables get stored in memory, and the size of each variable will differ depending on its data type.&lt;/p>
&lt;p>For instance, an integer variable like &lt;code>num&lt;/code> declared above is 4 bytes long on my Mac, but the size could vary depending on the machine.&lt;/p>
&lt;p>You can always check the size of a particular data type by using the &lt;code>sizeof()&lt;/code> operator.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%lu&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>output: 4&lt;/p>
&lt;h2 id="the-address-of-operator-">The address-of operator (&amp;amp;)&lt;/h2>
&lt;p>The address-of operator is just an operator we place before some variable name to get that variable’s address in memory. We print this address using the &lt;code>%p&lt;/code> format specifier to get the address in hexadecimal.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> num &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%p&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>num);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>output: &lt;em>0x7ffee7ea278c&lt;/em>&lt;/p>
&lt;h2 id="the-concept-of-a-pointer">The concept of a pointer&lt;/h2>
&lt;p>A pointer is just a variable that holds the address in memory of some other variable.&lt;/p>
&lt;p>When declaring a pointer variable, we have to place a &lt;code>*&lt;/code> symbol just before the variable name.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>pointer;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now that we declared our pointer variable let’s try assigning it the address of the variable &lt;code>num&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>pointer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>num;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now &lt;code>pointer&lt;/code> will hold &lt;em>0x7ffee7ea278c&lt;/em>, the address in memory of the variable &lt;code>num&lt;/code>.&lt;/p>
&lt;p>You can also declare a pointer variable and assign it a value at the same line.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>pointer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>num;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="dereferencing-a-pointer">Dereferencing a pointer&lt;/h2>
&lt;p>Dereferencing a pointer means accessing or manipulating data stored at an address in memory through a pointer variable.&lt;/p>
&lt;p>Say we wanted to change the value of &lt;code>num&lt;/code> from 1 (the value we initialized it with) to 2.
We could do something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>num &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But, what if we wanted to use the pointer we declared to change &lt;code>num&lt;/code>’s value?
That’s when we use the &lt;em>dereference operator&lt;/em> (*)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">*&lt;/span>pointer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, num);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>output: 2&lt;/p>
&lt;hr>
&lt;h2 id="use-example">Use Example&lt;/h2>
&lt;p>Say we wanted to make a function that receives two numbers and swap them.
That would be kind of tricky to do because we can only return a single value from a function.
But with pointers, we can access some variable’s memory location and change it directly.&lt;/p>
&lt;p>Consider the following example:&lt;/p>
&lt;p>We are declaring a function that receives two pointers and, we want to swap their values.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>First, we create a temporary variable and assign it the value pointed by &lt;code>a&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Second, we dereference the pointer &lt;code>a&lt;/code> and set it to be equal to what &lt;code>b&lt;/code> is pointing to. (That is, if &lt;code>a&lt;/code> is pointing to a variable x containing 1 and &lt;code>b&lt;/code> is pointing to a variable y containing 2 then, &lt;code>a&lt;/code> would still be pointing to x but x would now contain 2.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Third, we set the value pointed by &lt;code>b&lt;/code> to be equal to &lt;code>temp&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">swap&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>a, &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> temp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>b &lt;span style="color:#f92672">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, we can call the swap function on main and see if it works.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> y &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">swap&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>x, &lt;span style="color:#f92672">&amp;amp;&lt;/span>y);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;x: %i&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">y: %i&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, x, y);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>output:
x: 2
y: 1&lt;/p></description></item></channel></rss>