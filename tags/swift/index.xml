<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Swift on riceset</title><link>https://riceset.com/tags/swift/</link><description>Recent content in Swift on riceset</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2023 riceset</copyright><lastBuildDate>Sun, 10 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://riceset.com/tags/swift/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting started with SwiftUI (Stanford CS193p)</title><link>https://riceset.com/articles/getting-started-with-swiftui-stanford-cs193p/</link><pubDate>Sun, 10 Dec 2023 00:00:00 +0000</pubDate><guid>https://riceset.com/articles/getting-started-with-swiftui-stanford-cs193p/</guid><description>
&lt;img src="https://riceset.com/images/swiftui-intro-cover.png"/>
&lt;p>This struct behaves like a view (the struct conforms to the &lt;code>View&lt;/code> protocol)
The &lt;code>View&lt;/code> protocol requires you to have the body variable (of type &amp;lsquo;some View&amp;rsquo;)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ContentView&lt;/span>: View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The block (curly brackets) after the variable declaration represents a function (closure) and the value it returns gets assigned to the variable &lt;code>body&lt;/code>. As long as it is a view (&lt;code>VStack&lt;/code>, &lt;code>Text&lt;/code>, &lt;code>Image&lt;/code>, etc) it is ok to assign it. (note: writing the keyword &lt;code>return&lt;/code> here is optional!)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ContentView&lt;/span>: View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Text(&lt;span style="color:#e6db74">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="shapes">Shapes&lt;/h3>
&lt;h4 id="roundedrectangle">RoundedRectangle()&lt;/h4>
&lt;p>We can return the &lt;code>RoundedRectangle()&lt;/code> view specifying its &lt;code>cornerRadius&lt;/code> and calling modifier functions like &lt;code>.padding()&lt;/code> (can receive an optional argument like &lt;code>.horizontal&lt;/code>) and &lt;code>.stroke()&lt;/code> (contrary to &lt;code>.fill()&lt;/code>) to outline a shape (can receive an optional argument like &lt;code>lineWidth: 3&lt;/code>).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ContentView&lt;/span>: View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RoundedRectangle(cornerRadius: &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .stroke()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .padding()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ContentView&lt;/span>: View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RoundedRectangle(cornerRadius: &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .stroke(lineWidth: &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .padding(.horizontal)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .foregroundColor(.red)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Tip: You can write just &lt;code>.red&lt;/code> instead of &lt;code>Color.red&lt;/code> when defining the foreground color.&lt;/p>
&lt;h3 id="view-combiners">View Combiners&lt;/h3>
&lt;h4 id="the-zstack">The ZStack()&lt;/h4>
&lt;p>The &lt;code>ZStack()&lt;/code> receives a closure as a parameter. (this closure is called a &lt;strong>View Builder&lt;/strong>)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ContentView&lt;/span>: View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ZStack(content: {})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;strong>View Builder&lt;/strong> allows us to list all the views we want to combine and turns it into another view. You also don&amp;rsquo;t need to write &lt;code>return&lt;/code> inside the &lt;strong>View Builder&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        ZStack(content: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            RoundedRectangle(cornerRadius: &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                .stroke()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                .padding()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            Text(&lt;span style="color:#e6db74">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="modifying-the-view-combiner">Modifying the View Combiner&lt;/h4>
&lt;p>Applying a modifier function to a view combiner will apply the properties to all the view within it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        ZStack(content: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            RoundedRectangle(cornerRadius: &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                .stroke()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            Text(&lt;span style="color:#e6db74">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        .padding()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        .foregroundColor(.red)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Preview:&lt;/p>
&lt;p>&lt;img src="https://github.com/riceset/riceset.com/assets/48802655/0b64ae6f-4c52-4f91-ab17-230027e9daa0" alt="middle">&lt;/p>
&lt;h4 id="setting-the-alignment">Setting the alignment&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        ZStack(alignment: .top, content: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            RoundedRectangle(cornerRadius: &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>                .stroke()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>            Text(&lt;span style="color:#e6db74">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        .padding()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        .foregroundColor(.red)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Preview:&lt;/p>
&lt;p>&lt;img src="https://github.com/riceset/riceset.com/assets/48802655/714a35d1-26e1-4092-8ca8-29213d99c471" alt="top">&lt;/p>
&lt;h4 id="simplifying-the-code">Simplifying the code&lt;/h4>
&lt;p>When the last argument of a function is also a function you can simplify the code like this:&lt;/p>
&lt;p>This code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        ZStack(content: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>becomes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        ZStack() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also remove the parenthesis from the ZStack&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>    &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        ZStack {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>        }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="encapsulating-views">Encapsulating views&lt;/h4>
&lt;p>To avoid redundancy, we can get our &lt;code>ZStack&lt;/code> representing a card and turn it into a view itself.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">CardView&lt;/span>: View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ZStack {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RoundedRectangle(cornerRadius: &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .stroke()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Text(&lt;span style="color:#e6db74">&amp;#34;👻&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then call it form the &lt;code>ContentView&lt;/code> in a &lt;code>HStack&lt;/code> (horizontal stack):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ContentView&lt;/span>: View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HStack {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CardView()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CardView()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CardView()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CardView()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .padding()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .foregroundColor(.red)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://github.com/riceset/riceset.com/assets/48802655/b10032d3-1385-4395-aa7b-af2e09d08c26" alt="cardviewhstacked">&lt;/p>
&lt;h4 id="creating-local-variables">Creating local variables&lt;/h4>
&lt;p>Instead of repetitively calling &lt;code>RoundedRectangle()&lt;/code>, we can assign it to a variable (&lt;code>rectangle&lt;/code> in this case) and use it instead to make our code look cleaner.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> rectangle = RoundedRectangle(cornerRadius: &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rectangle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .fill()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .foregroundColor(.white)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rectangle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .stroke(lineWidth: &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Text(&lt;span style="color:#e6db74">&amp;#34;👻&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .font(.largeTitle)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="flipping-the-card-using-boolean-values">Flipping the card using boolean values&lt;/h4>
&lt;p>Here, we created a boolean variable called &lt;code>isFaceUp&lt;/code> and initialized it to &lt;code>true&lt;/code>. Then, using the &lt;code>if&lt;/code> control flow structure, we can change what kind of view we would like to display (if it is the card with a white background and text or just a card filled in red.)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> isFaceUp = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> isFaceUp {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rectangle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .fill()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .foregroundColor(.white)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rectangle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .stroke(lineWidth: &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Text(&lt;span style="color:#e6db74">&amp;#34;👻&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .font(.largeTitle)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rectangle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .fill()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Passing &lt;code>isFaceUp&lt;/code> as a parameter when calling &lt;code>CardView&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>HStack {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CardView(isFaceUp: &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CardView(isFaceUp: &lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CardView(isFaceUp: &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CardView(isFaceUp: &lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://github.com/riceset/riceset.com/assets/48802655/7a3d9c14-63ca-4e0e-8090-0a0d9b34f623" alt="flippedcards">&lt;/p>
&lt;h4 id="view-mutability-and-state">View Mutability and @State&lt;/h4>
&lt;p>If we try to add &lt;code>.onTapGesture()&lt;/code> to our &lt;code>ZStack&lt;/code> to change the value of a variable, we will get an error because all views are immutable. In this case, we want to change the value of &lt;code>isFaceUp&lt;/code>, but as it is not possible we can add &lt;code>@State&lt;/code> to it to turn it into a pointer to a boolean to somewhere in memory and whenever it changes the &lt;code>body&lt;/code> view gets rebuilt.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>@State &lt;span style="color:#66d9ef">var&lt;/span> isFaceUp = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ZStack {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .onTapGesture {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> isFaceUp = &lt;span style="color:#f92672">!&lt;/span>isFaceUp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="using-dynamic-text">Using dynamic text&lt;/h4>
&lt;p>We can create a new variable inside our &lt;code>CardView&lt;/code> called content (representing the content for the &lt;code>Text&lt;/code>) and pass the content dynamically from the &lt;code>ContentView&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">CardView&lt;/span>: View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> content: String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ZStack {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Text(content)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then from the &lt;code>ContentView&lt;/code>, let&amp;rsquo;s create an array of strings for the card contents and indexing from this array when passing the content to the &lt;code>CardView&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ContentView&lt;/span>: View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> emojis: [String] = [&lt;span style="color:#e6db74">&amp;#34;👻&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;⛩️&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;🔗&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;🌹&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HStack {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CardView(content: emojis[&lt;span style="color:#ae81ff">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CardView(content: emojis[&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CardView(content: emojis[&lt;span style="color:#ae81ff">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CardView(content: emojis[&lt;span style="color:#ae81ff">3&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But, to write it in a less methodical way we can use a &lt;code>ForEach&lt;/code> statement with &lt;code>emoji&lt;/code> being a variable representing the current item from an iteration.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>ForEach(emojis) { emoji &lt;span style="color:#66d9ef">in&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CardView(content: emoji)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But the code above will not work because to use a &lt;code>ForEach&lt;/code> we need to make each item from our array conform to the &lt;code>Identifiable&lt;/code> protocol meaning that each item must be unique and have an ID.&lt;/p>
&lt;p>To solve this problem, we can add &lt;code>id&lt;/code> as a parameter to &lt;code>ForEach&lt;/code> and set it to &lt;code>\.self&lt;/code> meaning that the variable itself is going to be it&amp;rsquo;s own ID.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>ForEach(emojis, id: &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>.&lt;span style="color:#66d9ef">self&lt;/span>) { emoji &lt;span style="color:#66d9ef">in&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CardView(content: emoji)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>